// precedence and associativity rules

 Name         Operators     Associates
------------------------------------
 Equality     == !=         Left
 Comparison   > >= < <=     Left
 Term         - +           Left
 Factor       / *           Left
 Unary        ! - +         Right


// precedence increases downwards
// each rule matches expressions at its precedence level or higher

program       -> declaration* EOF ;

declaration   -> funcDecl
              |  varDecl
              |  statement ;

funcDecl      -> "function" function ;

function      -> IDENTIFIER "(" parameters? ")" block ;

parameters    -> IDENTIFIER ( "," IDENTIFIER )* ;

varDecl       -> "let" IDENTIFIER ( "=" expression )? ";" ;

statement     -> exprStmt
              |  forStmt
              |  ifStmt
              |  printStmt
              |  whileStmt
              |  block ;

exprStmt      -> expression ";" ;

forStmt       -> "for" "("
                    ( varDecl | exprStmt | ";" )
                    expression? ";"
                    expression?
                 ")" statement ;

ifStmt        -> "if" "(" expression ")" statement
               ( "else" statement )? ;

printStmt     -> "print" expression ";" ;

whileStmt     -> "while" "(" expression ")" statement ;

block         -> "{" declaration* "}" ;

expression    -> assignment ;

assignment    -> IDENTIFIER "=" assignment
              |  logic_or ;

logic_or      -> logic_and ( "or" logic_and )* ;

logic_and     -> equality ( "and" equality )* ;

equality      -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison    -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term          -> factor ( ( "-" | "+" ) factor )* ;

factor        -> unary ( ( "/" | "*" ) unary )* ;

unary         -> ( "+" | "-" | "!" ) unary | call ;

call          -> primary ( "(" arguments? ")" )* ;

arguments     -> expression ( "," expression )* ;

primary       -> "true" | "false" | "void"
              |  NUMBER | STRING
              |  "(" expression ")"
              |  IDENTIFIER ;
